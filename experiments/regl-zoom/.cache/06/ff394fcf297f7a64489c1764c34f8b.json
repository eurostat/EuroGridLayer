{"id":"node_modules/ngraph.quadtreebh/insertStack.js","dependencies":[{"name":"E:\\web\\gridded-statistics\\Github\\EuroGridLayer\\experiments\\regl-zoom\\package.json","includedInParent":true,"mtime":1576225986807},{"name":"E:\\web\\gridded-statistics\\Github\\EuroGridLayer\\experiments\\regl-zoom\\node_modules\\ngraph.quadtreebh\\package.json","includedInParent":true,"mtime":1576225960805}],"generated":{"js":"module.exports = InsertStack;\n\n/**\n * Our implmentation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack () {\n    this.stack = [];\n    this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n    isEmpty: function() {\n        return this.popIdx === 0;\n    },\n    push: function (node, body) {\n        var item = this.stack[this.popIdx];\n        if (!item) {\n            // we are trying to avoid memory pressue: create new element\n            // only when absolutely necessary\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\n        } else {\n            item.node = node;\n            item.body = body;\n        }\n        ++this.popIdx;\n    },\n    pop: function () {\n        if (this.popIdx > 0) {\n            return this.stack[--this.popIdx];\n        }\n    },\n    reset: function () {\n        this.popIdx = 0;\n    }\n};\n\nfunction InsertStackElement(node, body) {\n    this.node = node; // QuadTree node\n    this.body = body; // physical body which needs to be inserted to node\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ngraph.quadtreebh/insertStack.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}}],"sources":{"node_modules/ngraph.quadtreebh/insertStack.js":"module.exports = InsertStack;\n\n/**\n * Our implmentation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack () {\n    this.stack = [];\n    this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n    isEmpty: function() {\n        return this.popIdx === 0;\n    },\n    push: function (node, body) {\n        var item = this.stack[this.popIdx];\n        if (!item) {\n            // we are trying to avoid memory pressue: create new element\n            // only when absolutely necessary\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\n        } else {\n            item.node = node;\n            item.body = body;\n        }\n        ++this.popIdx;\n    },\n    pop: function () {\n        if (this.popIdx > 0) {\n            return this.stack[--this.popIdx];\n        }\n    },\n    reset: function () {\n        this.popIdx = 0;\n    }\n};\n\nfunction InsertStackElement(node, body) {\n    this.node = node; // QuadTree node\n    this.body = body; // physical body which needs to be inserted to node\n}\n"},"lineCount":43}},"error":null,"hash":"8b895582dae8ef554a8d4800b736a95d","cacheData":{"env":{}}}