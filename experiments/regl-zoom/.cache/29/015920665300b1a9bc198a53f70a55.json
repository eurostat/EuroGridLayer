{"id":"src/grid-gl/commands.js","dependencies":[{"name":"E:\\web\\gridded-statistics\\Github\\EuroGridLayer\\experiments\\regl-zoom\\package.json","includedInParent":true,"mtime":1576225986807}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n//webGL logic\nvar drawCells = function drawCells(regl, cells) {\n  return {\n    // Shaders in regl are just strings.  You can use glslify or whatever you want\n    // to define them.  No need to manually create shader objects.\n    frag: \"\\n    // set the precision of floating point numbers\\n  precision highp float;\\n\\n  // this value is populated by the vertex shader\\n    varying vec3 fragColor;\\n\\n    void main() {\\n        // gl_FragColor is a special variable that holds the color of a pixel\\n        gl_FragColor = vec4(fragColor, 1);\\n    }\\n    \",\n    vert: \"\\n    // per vertex attributes\\n    attribute vec2 position;\\n    attribute vec3 color;\\n\\n    // variables to send to the fragment shader\\n    varying vec3 fragColor;\\n\\n    // values that are the same for all vertices\\n    uniform float pointWidth;\\n\\n    // mat3 transformation defined in grid.js\\n    uniform mat3 transform;\\n\\n    // helper function to transform from pixel space to normalized device coordinates (NDC)\\n    // in NDC (0,0) is the middle, (-1, 1) is the top left and (1, -1) is the bottom right.\\n    vec2 normalizeCoords(vec2 position) {\\n    // read in the positions into x and y vars\\n    float x = position[0];\\n    float y = position[1];\\n\\n    return vec2(x,y);\\n    }\\n\\n    void main() {\\n        // update the size of a point based on the prop pointWidth\\n        gl_PointSize = pointWidth;\\n\\n  // send color to the fragment shader\\n  fragColor = color;\\n\\n        // scale to normalized device coordinates\\n        // gl_Position is a special variable that holds the position of a vertex\\n        vec3 final = transform * vec3(normalizeCoords(position), 1);\\n  gl_Position = vec4(final.xy, 0.0, 1.0);\\n    }\\n    \",\n    attributes: {\n      // each of these gets mapped to a single entry for each of the cells.\n      // this means the vertex shader will receive just the relevant value for a given point.\n      position: cells,\n      color: regl.prop('colors')\n    },\n    uniforms: {\n      // by using `regl.prop` to pass these in, we can specify them as arguments\n      // to our drawcells function\n      pointWidth: regl.prop('pointWidth'),\n      transform: regl.prop(\"transform\")\n    },\n    // specify the number of cells to draw\n    count: cells.length,\n    // specify that each vertex is a point (not part of a mesh)\n    primitive: 'points'\n  };\n};\n\nvar cmds = {\n  point: drawCells\n};\nvar _default = cmds;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"src/grid-gl/commands.js","original":{"line":1,"column":0}},{"generated":{"line":9,"column":0},"source":"src/grid-gl/commands.js","original":{"line":2,"column":0}},{"name":"drawCells","generated":{"line":9,"column":4},"source":"src/grid-gl/commands.js","original":{"line":2,"column":6}},{"generated":{"line":9,"column":13},"source":"src/grid-gl/commands.js","original":{"line":2,"column":15}},{"generated":{"line":9,"column":16},"source":"src/grid-gl/commands.js","original":{"line":2,"column":18}},{"name":"drawCells","generated":{"line":9,"column":25},"source":"src/grid-gl/commands.js","original":{"line":2,"column":6}},{"generated":{"line":9,"column":34},"source":"src/grid-gl/commands.js","original":{"line":2,"column":18}},{"name":"regl","generated":{"line":9,"column":35},"source":"src/grid-gl/commands.js","original":{"line":2,"column":19}},{"generated":{"line":9,"column":39},"source":"src/grid-gl/commands.js","original":{"line":2,"column":18}},{"name":"cells","generated":{"line":9,"column":41},"source":"src/grid-gl/commands.js","original":{"line":2,"column":25}},{"generated":{"line":9,"column":46},"source":"src/grid-gl/commands.js","original":{"line":2,"column":18}},{"generated":{"line":9,"column":48},"source":"src/grid-gl/commands.js","original":{"line":2,"column":35}},{"generated":{"line":10,"column":0},"source":"src/grid-gl/commands.js","original":{"line":3,"column":2}},{"generated":{"line":10,"column":9},"source":"src/grid-gl/commands.js","original":{"line":3,"column":9}},{"generated":{"line":11,"column":0},"source":"src/grid-gl/commands.js","original":{"line":4,"column":4}},{"generated":{"line":12,"column":0},"source":"src/grid-gl/commands.js","original":{"line":5,"column":4}},{"name":"frag","generated":{"line":13,"column":0},"source":"src/grid-gl/commands.js","original":{"line":6,"column":4}},{"name":"frag","generated":{"line":13,"column":4},"source":"src/grid-gl/commands.js","original":{"line":6,"column":4}},{"generated":{"line":13,"column":8},"source":"src/grid-gl/commands.js","original":{"line":6,"column":8}},{"generated":{"line":13,"column":329},"source":"src/grid-gl/commands.js","original":{"line":3,"column":9}},{"name":"vert","generated":{"line":14,"column":0},"source":"src/grid-gl/commands.js","original":{"line":19,"column":4}},{"name":"vert","generated":{"line":14,"column":4},"source":"src/grid-gl/commands.js","original":{"line":19,"column":4}},{"generated":{"line":14,"column":8},"source":"src/grid-gl/commands.js","original":{"line":19,"column":8}},{"generated":{"line":14,"column":1157},"source":"src/grid-gl/commands.js","original":{"line":3,"column":9}},{"name":"attributes","generated":{"line":15,"column":0},"source":"src/grid-gl/commands.js","original":{"line":56,"column":4}},{"name":"attributes","generated":{"line":15,"column":4},"source":"src/grid-gl/commands.js","original":{"line":56,"column":4}},{"generated":{"line":15,"column":14},"source":"src/grid-gl/commands.js","original":{"line":56,"column":14}},{"generated":{"line":15,"column":16},"source":"src/grid-gl/commands.js","original":{"line":56,"column":16}},{"generated":{"line":16,"column":0},"source":"src/grid-gl/commands.js","original":{"line":57,"column":6}},{"generated":{"line":17,"column":0},"source":"src/grid-gl/commands.js","original":{"line":58,"column":6}},{"name":"position","generated":{"line":18,"column":0},"source":"src/grid-gl/commands.js","original":{"line":59,"column":6}},{"name":"position","generated":{"line":18,"column":6},"source":"src/grid-gl/commands.js","original":{"line":59,"column":6}},{"generated":{"line":18,"column":14},"source":"src/grid-gl/commands.js","original":{"line":59,"column":14}},{"name":"cells","generated":{"line":18,"column":16},"source":"src/grid-gl/commands.js","original":{"line":59,"column":16}},{"generated":{"line":18,"column":21},"source":"src/grid-gl/commands.js","original":{"line":56,"column":16}},{"name":"color","generated":{"line":19,"column":0},"source":"src/grid-gl/commands.js","original":{"line":60,"column":6}},{"name":"color","generated":{"line":19,"column":6},"source":"src/grid-gl/commands.js","original":{"line":60,"column":6}},{"generated":{"line":19,"column":11},"source":"src/grid-gl/commands.js","original":{"line":60,"column":11}},{"name":"regl","generated":{"line":19,"column":13},"source":"src/grid-gl/commands.js","original":{"line":60,"column":13}},{"generated":{"line":19,"column":17},"source":"src/grid-gl/commands.js","original":{"line":60,"column":17}},{"name":"prop","generated":{"line":19,"column":18},"source":"src/grid-gl/commands.js","original":{"line":60,"column":18}},{"generated":{"line":19,"column":22},"source":"src/grid-gl/commands.js","original":{"line":60,"column":13}},{"generated":{"line":19,"column":23},"source":"src/grid-gl/commands.js","original":{"line":60,"column":23}},{"generated":{"line":19,"column":31},"source":"src/grid-gl/commands.js","original":{"line":60,"column":13}},{"generated":{"line":20,"column":0},"source":"src/grid-gl/commands.js","original":{"line":56,"column":16}},{"generated":{"line":20,"column":5},"source":"src/grid-gl/commands.js","original":{"line":3,"column":9}},{"name":"uniforms","generated":{"line":21,"column":0},"source":"src/grid-gl/commands.js","original":{"line":63,"column":4}},{"name":"uniforms","generated":{"line":21,"column":4},"source":"src/grid-gl/commands.js","original":{"line":63,"column":4}},{"generated":{"line":21,"column":12},"source":"src/grid-gl/commands.js","original":{"line":63,"column":12}},{"generated":{"line":21,"column":14},"source":"src/grid-gl/commands.js","original":{"line":63,"column":14}},{"generated":{"line":22,"column":0},"source":"src/grid-gl/commands.js","original":{"line":64,"column":6}},{"generated":{"line":23,"column":0},"source":"src/grid-gl/commands.js","original":{"line":65,"column":6}},{"name":"pointWidth","generated":{"line":24,"column":0},"source":"src/grid-gl/commands.js","original":{"line":66,"column":6}},{"name":"pointWidth","generated":{"line":24,"column":6},"source":"src/grid-gl/commands.js","original":{"line":66,"column":6}},{"generated":{"line":24,"column":16},"source":"src/grid-gl/commands.js","original":{"line":66,"column":16}},{"name":"regl","generated":{"line":24,"column":18},"source":"src/grid-gl/commands.js","original":{"line":66,"column":18}},{"generated":{"line":24,"column":22},"source":"src/grid-gl/commands.js","original":{"line":66,"column":22}},{"name":"prop","generated":{"line":24,"column":23},"source":"src/grid-gl/commands.js","original":{"line":66,"column":23}},{"generated":{"line":24,"column":27},"source":"src/grid-gl/commands.js","original":{"line":66,"column":18}},{"generated":{"line":24,"column":28},"source":"src/grid-gl/commands.js","original":{"line":66,"column":28}},{"generated":{"line":24,"column":40},"source":"src/grid-gl/commands.js","original":{"line":66,"column":18}},{"generated":{"line":24,"column":41},"source":"src/grid-gl/commands.js","original":{"line":63,"column":14}},{"name":"transform","generated":{"line":25,"column":0},"source":"src/grid-gl/commands.js","original":{"line":67,"column":6}},{"name":"transform","generated":{"line":25,"column":6},"source":"src/grid-gl/commands.js","original":{"line":67,"column":6}},{"generated":{"line":25,"column":15},"source":"src/grid-gl/commands.js","original":{"line":67,"column":15}},{"name":"regl","generated":{"line":25,"column":17},"source":"src/grid-gl/commands.js","original":{"line":67,"column":17}},{"generated":{"line":25,"column":21},"source":"src/grid-gl/commands.js","original":{"line":67,"column":21}},{"name":"prop","generated":{"line":25,"column":22},"source":"src/grid-gl/commands.js","original":{"line":67,"column":22}},{"generated":{"line":25,"column":26},"source":"src/grid-gl/commands.js","original":{"line":67,"column":17}},{"generated":{"line":25,"column":27},"source":"src/grid-gl/commands.js","original":{"line":67,"column":27}},{"generated":{"line":25,"column":38},"source":"src/grid-gl/commands.js","original":{"line":67,"column":17}},{"generated":{"line":26,"column":0},"source":"src/grid-gl/commands.js","original":{"line":63,"column":14}},{"generated":{"line":26,"column":5},"source":"src/grid-gl/commands.js","original":{"line":3,"column":9}},{"generated":{"line":27,"column":0},"source":"src/grid-gl/commands.js","original":{"line":70,"column":4}},{"name":"count","generated":{"line":28,"column":0},"source":"src/grid-gl/commands.js","original":{"line":71,"column":4}},{"name":"count","generated":{"line":28,"column":4},"source":"src/grid-gl/commands.js","original":{"line":71,"column":4}},{"generated":{"line":28,"column":9},"source":"src/grid-gl/commands.js","original":{"line":71,"column":9}},{"name":"cells","generated":{"line":28,"column":11},"source":"src/grid-gl/commands.js","original":{"line":71,"column":11}},{"generated":{"line":28,"column":16},"source":"src/grid-gl/commands.js","original":{"line":71,"column":16}},{"name":"length","generated":{"line":28,"column":17},"source":"src/grid-gl/commands.js","original":{"line":71,"column":17}},{"generated":{"line":28,"column":23},"source":"src/grid-gl/commands.js","original":{"line":3,"column":9}},{"generated":{"line":29,"column":0},"source":"src/grid-gl/commands.js","original":{"line":73,"column":4}},{"name":"primitive","generated":{"line":30,"column":0},"source":"src/grid-gl/commands.js","original":{"line":74,"column":4}},{"name":"primitive","generated":{"line":30,"column":4},"source":"src/grid-gl/commands.js","original":{"line":74,"column":4}},{"generated":{"line":30,"column":13},"source":"src/grid-gl/commands.js","original":{"line":74,"column":13}},{"generated":{"line":30,"column":15},"source":"src/grid-gl/commands.js","original":{"line":74,"column":15}},{"generated":{"line":31,"column":0},"source":"src/grid-gl/commands.js","original":{"line":3,"column":9}},{"generated":{"line":31,"column":3},"source":"src/grid-gl/commands.js","original":{"line":3,"column":2}},{"generated":{"line":32,"column":0},"source":"src/grid-gl/commands.js","original":{"line":76,"column":1}},{"generated":{"line":32,"column":1},"source":"src/grid-gl/commands.js","original":{"line":2,"column":0}},{"generated":{"line":34,"column":0},"source":"src/grid-gl/commands.js","original":{"line":78,"column":0}},{"name":"cmds","generated":{"line":34,"column":4},"source":"src/grid-gl/commands.js","original":{"line":78,"column":6}},{"generated":{"line":34,"column":8},"source":"src/grid-gl/commands.js","original":{"line":78,"column":10}},{"generated":{"line":34,"column":11},"source":"src/grid-gl/commands.js","original":{"line":78,"column":13}},{"name":"point","generated":{"line":35,"column":0},"source":"src/grid-gl/commands.js","original":{"line":79,"column":2}},{"name":"point","generated":{"line":35,"column":2},"source":"src/grid-gl/commands.js","original":{"line":79,"column":2}},{"generated":{"line":35,"column":7},"source":"src/grid-gl/commands.js","original":{"line":79,"column":7}},{"name":"drawCells","generated":{"line":35,"column":9},"source":"src/grid-gl/commands.js","original":{"line":79,"column":9}},{"generated":{"line":36,"column":0},"source":"src/grid-gl/commands.js","original":{"line":78,"column":13}},{"generated":{"line":36,"column":1},"source":"src/grid-gl/commands.js","original":{"line":78,"column":0}},{"name":"cmds","generated":{"line":37,"column":15},"source":"src/grid-gl/commands.js","original":{"line":82,"column":15}}],"sources":{"src/grid-gl/commands.js":"//webGL logic\nconst drawCells = (regl, cells) => {\n  return {\n    // Shaders in regl are just strings.  You can use glslify or whatever you want\n    // to define them.  No need to manually create shader objects.\n    frag: `\n    // set the precision of floating point numbers\n  precision highp float;\n\n  // this value is populated by the vertex shader\n    varying vec3 fragColor;\n\n    void main() {\n        // gl_FragColor is a special variable that holds the color of a pixel\n        gl_FragColor = vec4(fragColor, 1);\n    }\n    `,\n\n    vert: `\n    // per vertex attributes\n    attribute vec2 position;\n    attribute vec3 color;\n\n    // variables to send to the fragment shader\n    varying vec3 fragColor;\n\n    // values that are the same for all vertices\n    uniform float pointWidth;\n\n    // mat3 transformation defined in grid.js\n    uniform mat3 transform;\n\n    // helper function to transform from pixel space to normalized device coordinates (NDC)\n    // in NDC (0,0) is the middle, (-1, 1) is the top left and (1, -1) is the bottom right.\n    vec2 normalizeCoords(vec2 position) {\n    // read in the positions into x and y vars\n    float x = position[0];\n    float y = position[1];\n\n    return vec2(x,y);\n    }\n\n    void main() {\n        // update the size of a point based on the prop pointWidth\n        gl_PointSize = pointWidth;\n\n  // send color to the fragment shader\n  fragColor = color;\n\n        // scale to normalized device coordinates\n        // gl_Position is a special variable that holds the position of a vertex\n        vec3 final = transform * vec3(normalizeCoords(position), 1);\n  gl_Position = vec4(final.xy, 0.0, 1.0);\n    }\n    `,\n    attributes: {\n      // each of these gets mapped to a single entry for each of the cells.\n      // this means the vertex shader will receive just the relevant value for a given point.\n      position: cells,\n      color: regl.prop('colors'),\n    },\n\n    uniforms: {\n      // by using `regl.prop` to pass these in, we can specify them as arguments\n      // to our drawcells function\n      pointWidth: regl.prop('pointWidth'),\n      transform: regl.prop(\"transform\")\n    },\n\n    // specify the number of cells to draw\n    count: cells.length,\n\n    // specify that each vertex is a point (not part of a mesh)\n    primitive: 'points',\n  };\n};\n\nconst cmds = {\n  point: drawCells\n};\n\nexport default cmds;\n"},"lineCount":null}},"error":null,"hash":"3c94a39c22d458e1679a1eb19504263b","cacheData":{"env":{}}}