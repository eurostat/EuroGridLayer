{"id":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","dependencies":[{"name":"E:\\web\\gridded-statistics\\Github\\EuroGridLayer\\experiments\\regl-zoom\\package.json","includedInParent":true,"mtime":1576225986807},{"name":"E:\\web\\gridded-statistics\\Github\\EuroGridLayer\\experiments\\regl-zoom\\node_modules\\ngraph.physics.simulator\\package.json","includedInParent":true,"mtime":1576225960804}],"generated":{"js":"/**\n * Performs forces integration, using given timestep. Uses Euler method to solve\n * differential equation (http://en.wikipedia.org/wiki/Euler_method ).\n *\n * @returns {Number} squared distance of total position updates.\n */\n\nmodule.exports = integrate;\n\nfunction integrate(bodies, timeStep) {\n  var dx = 0, tx = 0,\n      dy = 0, ty = 0,\n      i,\n      max = bodies.length;\n\n  if (max === 0) {\n    return 0;\n  }\n\n  for (i = 0; i < max; ++i) {\n    var body = bodies[i],\n        coeff = timeStep / body.mass;\n\n    body.velocity.x += coeff * body.force.x;\n    body.velocity.y += coeff * body.force.y;\n    var vx = body.velocity.x,\n        vy = body.velocity.y,\n        v = Math.sqrt(vx * vx + vy * vy);\n\n    if (v > 1) {\n      body.velocity.x = vx / v;\n      body.velocity.y = vy / v;\n    }\n\n    dx = timeStep * body.velocity.x;\n    dy = timeStep * body.velocity.y;\n\n    body.pos.x += dx;\n    body.pos.y += dy;\n\n    tx += Math.abs(dx); ty += Math.abs(dy);\n  }\n\n  return (tx * tx + ty * ty)/max;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}}],"sources":{"node_modules/ngraph.physics.simulator/lib/eulerIntegrator.js":"/**\n * Performs forces integration, using given timestep. Uses Euler method to solve\n * differential equation (http://en.wikipedia.org/wiki/Euler_method ).\n *\n * @returns {Number} squared distance of total position updates.\n */\n\nmodule.exports = integrate;\n\nfunction integrate(bodies, timeStep) {\n  var dx = 0, tx = 0,\n      dy = 0, ty = 0,\n      i,\n      max = bodies.length;\n\n  if (max === 0) {\n    return 0;\n  }\n\n  for (i = 0; i < max; ++i) {\n    var body = bodies[i],\n        coeff = timeStep / body.mass;\n\n    body.velocity.x += coeff * body.force.x;\n    body.velocity.y += coeff * body.force.y;\n    var vx = body.velocity.x,\n        vy = body.velocity.y,\n        v = Math.sqrt(vx * vx + vy * vy);\n\n    if (v > 1) {\n      body.velocity.x = vx / v;\n      body.velocity.y = vy / v;\n    }\n\n    dx = timeStep * body.velocity.x;\n    dy = timeStep * body.velocity.y;\n\n    body.pos.x += dx;\n    body.pos.y += dy;\n\n    tx += Math.abs(dx); ty += Math.abs(dy);\n  }\n\n  return (tx * tx + ty * ty)/max;\n}\n"},"lineCount":46}},"error":null,"hash":"405a4ec3f242632336c052e3a722d0f5","cacheData":{"env":{}}}