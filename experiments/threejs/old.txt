//threejs scene / camera
const width = window.innerWidth;
const height = window.innerHeight;
const near_plane = 0.1;
const far_plane = 150;
const initial_camera_position = {
    x: 0.9,
    y: 0.9,
    z: 10
}
const initial_camera_lookAt = new THREE.Vector3(0, 0, 0)

//threejs point layer
var pointCloud;
var point_attenuation = false;
var point_size = 0.06;

//raycasting variables
var mouse = new THREE.Vector2();
var intersection = null;
var threshold = 0.009;

// Add canvas
let renderer = new THREE.WebGLRenderer();
renderer.setPixelRatio(window.devicePixelRatio);
renderer.setSize(width, height);
document.body.appendChild(renderer.domElement);

// Add stats box
var stats = new Stats();
stats.dom.style.position = 'absolute';
stats.dom.style.top = '0px';
stats.dom.style.right = '0px'
document.body.appendChild(stats.dom);


// Set up camera and scene
let camera = new THREE.PerspectiveCamera(
    45, //fov — Camera frustum vertical field of view.
    width / height, //aspect — Camera frustum aspect ratio
    near_plane, //near — Camera frustum near plane
    far_plane//far — Camera frustum far plane
);
/* var camera = new THREE.OrthographicCamera(width / - 2, width / 2, height / 2, height / - 2, near_plane, far_plane);
 */
camera.position.set(initial_camera_position.x, initial_camera_position.y, initial_camera_position.z);
camera.position.normalize();
camera.lookAt(initial_camera_lookAt);
const scene = new THREE.Scene();
scene.background = new THREE.Color(0x000000);

//for identifying points
var raycaster = new THREE.Raycaster();
raycaster.params.Points.threshold = threshold;